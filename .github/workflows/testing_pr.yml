name: "Testing Pull Request"

on:
  pull_request:
    branches:
      - "master"

jobs:
  prepare_matrix: ##############################################################################
    runs-on: ubuntu-latest
    outputs:
       matrix_unit_test: ${{ steps.setmatrix.outputs.matrix1 }}

    steps:
        - uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5

        - name: Set Dynamic Matrix
          id: setmatrix
          run: |
           matrix_str=$(python utils/info2json.py testing_matrix)
           echo "matrix1=$matrix_str" >> $GITHUB_OUTPUT
           matrix_str=$(python utils/info2json.py tutorial_testing_matrix)
           echo "matrix2=$matrix_str" >> $GITHUB_OUTPUT

  check_matrix: ##############################################################################
    runs-on: ubuntu-latest
    needs: prepare_matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      - name: Check matrix definition
        run: |
          matrix='${{ needs.prepare_matrix.outputs.matrix_unit_test }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  black: ######################################################################################
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install black
      run: |
        pip install black[jupyter]==24.4.2

    - name: Run black formatter on PyDMD source code
      run: |
        black --check --diff --color pydmd/ utils/ tests/
        if [[ $? -ne "0" ]]; then
          echo "Source code needs re-formatting"
          exit 1
        fi

    - name: Run black formatter on PyDMD tutorials
      run: |
        black --check --diff --color tutorials/
        if [[ $? -ne "0" ]]; then
          echo "Tutorials need re-formatting"
          exit 1
        fi

  sort_dependencies: ##########################################################################
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install isort
      run: |
        pip install isort

    - name: Run isort on PyDMD source code
      run: |
        OUT=$(isort pydmd/ tests/)
        if [[ $OUT ]]; then
            echo "All imports are properly sorted"
        else
            echo "$OUT"
        fi

  unit_test: #################################################################################
    needs: prepare_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.prepare_matrix.outputs.matrix_unit_test) }}
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: pyproject.toml
    - name: Install Python dependencies
      run: |
        pip install .[test]
        # Force NumPy version
        pip install numpy==${{ matrix.numpy-version }}
    - name: Test with pytest
      run: |
        pytest

